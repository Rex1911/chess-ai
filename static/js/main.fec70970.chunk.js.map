{"version":3,"sources":["util/AI.js","components/chessboard.js","App.js","serviceWorker.js","index.js"],"names":["AI","depth","getPieceValue","piece","color","val","evaluate","game","board","score","i","length","j","type","getBestMove","possibleMoves","ugly_moves","bestEvalValue","bestMove","currentMove","ugly_move","currentEvalValue","push","undo","Math","floor","random","minimax","maximizingPlayer","game_over","eval","maxEval","res","minEval","ChessBoard","state","fen","gameStatus","currentPlayer","squareStyles","draggable","searchDepth","moveTime","componentDidMount","Chess","setState","turn","validate","pMove","mappedMove","from","sourceSquare","to","targetSquare","promotion","move","setTimeout","makeAIMove","console","log","d1","Date","d2","handleClick","s","potentialMoves","moves","square","temp","forEach","formatted","match","backgroundColor","opacity","position","this","onDrop","onMouseOverSquare","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAAMA,E,kCAAAA,EACEC,MAAQ,EADVD,EAEEE,cAAgB,SAACC,EAAMC,GAC7B,IAAIC,EAAM,EAEV,OAAOF,GACN,IAAK,IACJE,EAAM,GACN,MACD,IAAK,IAGL,IAAK,IACJA,EAAM,GACN,MACD,IAAK,IACJA,EAAM,GACN,MACD,IAAK,IACJA,EAAM,GACN,MACD,IAAK,IACJA,EAAM,IAKR,MADwB,KAATD,EAAeC,GAAOA,GA1BjCL,EA8BEM,SAAW,SAACC,GAIlB,IAHA,IAAIC,EAAQD,EAAKC,QACbC,EAAQ,EAEJC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChC,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAME,GAAGC,OAAQC,IACnC,GAAkB,MAAfJ,EAAME,GAAGE,GAAY,CACvB,IAAIT,EAAQK,EAAME,GAAGE,GAAGC,KACpBT,EAAQI,EAAME,GAAGE,GAAGR,MAExBK,GAxCCT,EAwCoBE,cAAcC,EAAMC,GAI5C,OAAOK,GA5CHT,EA+CEc,YAAc,SAACP,GAKrB,IAJA,IAAIQ,EAAgBR,EAAKS,aACrBC,EAAgB,KAChBC,EAAW,GAEPR,EAAI,EAAGA,EAAIK,EAAcJ,OAAQD,IAAK,CAC7C,IAAIS,EAAcJ,EAAcL,GAChCH,EAAKa,UAAUD,GAEf,IAAIE,EAxDDrB,EAwDyBM,SAASC,GAClCc,GAAoBJ,GACtBC,EAASI,KAAKH,GACdF,EAAgBI,GACPA,EAAmBJ,KAC5BC,EAAW,IACFI,KAAKH,GACdF,EAAgBI,GAEjBd,EAAKgB,OAEN,OAAOL,EAASM,KAAKC,MAAMD,KAAKE,SAAWR,EAASP,UAnEhDX,EAsEE2B,QAAU,SAACpB,EAAMN,EAAO2B,GAC9B,GAAY,GAAT3B,GAAcM,EAAKsB,YACrB,MAAO,CAACC,KAxEL9B,EAwEgBM,SAASC,GAAOW,SAAU,MAG9C,GAAGU,EAAkB,CAKpB,IAJA,IAAIG,GAAW,KACXhB,EAAgBR,EAAKS,aACrBE,EAAW,GAEPR,EAAI,EAAGA,EAAIK,EAAcJ,OAAQD,IAAK,CAC7C,IAAIS,EAAcJ,EAAcL,GAChCH,EAAKa,UAAUD,GACf,IAAIa,EAnFFhC,EAmFa2B,QAAQpB,EAAMN,EAAQ,GAAG,GACxCM,EAAKgB,OACFS,EAAIF,MAAQC,GACdA,EAAUC,EAAIF,KACdZ,EAASI,KAAKH,IACLa,EAAIF,KAAOC,KACpBb,EAAW,IACFI,KAAKH,GACdY,EAAUC,EAAIF,MAGhB,MAAO,CAACA,KAAMC,EAASb,SAAUA,EAASM,KAAKC,MAAMD,KAAKE,SAAWR,EAASP,UAM9E,IAJA,IAAIsB,EAAU,KACVlB,EAAgBR,EAAKS,aACrBE,EAAW,GAEPR,EAAI,EAAGA,EAAIK,EAAcJ,OAAQD,IAAK,CAC7C,IAAIS,EAAcJ,EAAcL,GAChCH,EAAKa,UAAUD,GACf,IAAIa,EAvGFhC,EAuGa2B,QAAQpB,EAAMN,EAAQ,GAAG,GACxCM,EAAKgB,OACFS,EAAIF,MAAQG,GACdA,EAAUD,EAAIF,KACdZ,EAASI,KAAKH,IACLa,EAAIF,KAAOG,KACpBf,EAAW,IACFI,KAAKH,GACdc,EAAUD,EAAIF,MAGhB,MAAO,CAACA,KAAMG,EAASf,SAAUA,EAASM,KAAKC,MAAMD,KAAKE,SAAWR,EAASP,WAKlEX,IClHXO,EDkHWP,ICxBAkC,E,4MAvFdC,MAAQ,CACPC,IAAK,QACLC,WAAY,UACZC,cAAe,KACfC,aAAc,GACdC,WAAW,EACXC,YAAa,EACbC,SAAU,M,EAGXC,kBAAoB,WACnBpC,EAAO,IAAIqC,IACX,EAAKC,SAAS,CAAEP,cAAe/B,EAAKuC,U,EAGrCC,SAAW,SAAAC,GACV,IAAIC,EAAa,CAChBC,KAAMF,EAAMG,aACZC,GAAIJ,EAAMK,aACVC,UAAW,KAGiB,MAAzB/C,EAAKgD,KAAKN,KAIV1C,EAAKsB,YACR,EAAKgB,SAAS,CACbT,IAAK7B,EAAK6B,MACVC,WAAY,UAAY,EAAKF,MAAMG,cAAgB,QACnDE,WAAW,KAKb,EAAKK,SAAS,CAAET,IAAK7B,EAAK6B,MAAOE,cAAe/B,EAAKuC,OAASP,aAAc,KAC5EiB,YAAW,WAAO,EAAKC,eAAc,O,EAGtCA,WAAa,WACZC,QAAQC,IAAI,kBACZ,IAAIC,EAAK,IAAIC,KACT7B,EAAMhC,EAAG2B,QAAQpB,EAAM,EAAK4B,MAAMM,aAAa,GACnDiB,QAAQC,IAAI3B,GACZ,IAAI8B,EAAK,IAAID,KACbtD,EAAKa,UAAUY,EAAId,UAEfX,EAAKsB,YACR,EAAKgB,SAAS,CACbT,IAAK7B,EAAK6B,MACVC,WAAY,UAAY,EAAKF,MAAMG,cAAgB,QACnDE,WAAW,IAKb,EAAKK,SAAS,CAAET,IAAK7B,EAAK6B,MAAOE,cAAe/B,EAAKuC,OAASP,aAAc,GAAIG,UAAWoB,EAAGF,GAAI,IAAO,O,EAG1GG,YAAc,SAAAC,GACb,IAAIC,EAAiB1D,EAAK2D,MAAM,CAAEC,OAAQH,IACtCI,EAAO,GACXH,EAAeI,SAAQ,SAAAd,GACtB,IAAIe,EAAYf,EAAKgB,MAAM,iBACV,MAAbD,IAAmBF,EAAKE,EAAU,IAAM,CAACE,gBAAiB,OAAQC,QAAS,QAEhF,EAAK5B,SAAS,CAAEN,aAAc6B,K,uDAI9B,OACC,6BACC,kBAAC,IAAD,CACCM,SAAUC,KAAKxC,MAAMC,IACrBwC,OAAQD,KAAK5B,SACb8B,kBAAmBF,KAAKZ,YACxBxB,aAAcoC,KAAKxC,MAAMI,aACzBC,UAAWmC,KAAKxC,MAAMK,YAEvB,2CAAiBmC,KAAKxC,MAAME,YAC5B,8CAAoBsC,KAAKxC,MAAMG,eAC/B,yCAAeqC,KAAKxC,MAAMO,e,GAlFLoC,IAAMC,WCIhBC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.fec70970.chunk.js","sourcesContent":["class AI {\n\tstatic depth = 3;\n\tstatic getPieceValue = (piece,color) => {\n\t\tlet val = 0\n\n\t\tswitch(piece) {\n\t\t\tcase \"p\":\n\t\t\t\tval = 10;\n\t\t\t\tbreak;\n\t\t\tcase \"n\":\n\t\t\t\tval = 30;\n\t\t\t\tbreak;\n\t\t\tcase \"b\":\n\t\t\t\tval = 30;\n\t\t\t\tbreak;\n\t\t\tcase \"r\":\n\t\t\t\tval = 50;\n\t\t\t\tbreak;\n\t\t\tcase \"q\":\n\t\t\t\tval = 90;\n\t\t\t\tbreak;\n\t\t\tcase \"k\":\n\t\t\t\tval = 900;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet finalVal = color == \"w\" ? val : -val\n\t\treturn finalVal;\n\t}\n\t\n\tstatic evaluate = (game) => {\n\t\tlet board = game.board()\n\t\tlet score = 0;\n\n\t\tfor(let i = 0; i < board.length; i++) {\n\t\t\tfor(let j = 0; j < board[i].length; j++) {\n\t\t\t\tif(board[i][j] != null) {\n\t\t\t\t\tlet piece = board[i][j].type\n\t\t\t\t\tlet color = board[i][j].color\n\n\t\t\t\t\tscore = score + this.getPieceValue(piece,color)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn score;\n\t}\n\t\n\tstatic getBestMove = (game) => {\n\t\tlet possibleMoves = game.ugly_moves()\n\t\tlet bestEvalValue = 9999\n\t\tlet bestMove = [];\n\n\t\tfor(let i = 0; i < possibleMoves.length; i++) {\n\t\t\tlet currentMove = possibleMoves[i];\n\t\t\tgame.ugly_move(currentMove);\n\n\t\t\tlet currentEvalValue = this.evaluate(game)\n\t\t\tif(currentEvalValue == bestEvalValue) {\n\t\t\t\tbestMove.push(currentMove)\n\t\t\t\tbestEvalValue = currentEvalValue;\n\t\t\t} else if(currentEvalValue < bestEvalValue) {\n\t\t\t\tbestMove = [];\n\t\t\t\tbestMove.push(currentMove)\n\t\t\t\tbestEvalValue = currentEvalValue;\n\t\t\t}\n\t\t\tgame.undo();\n\t\t}\n\t\treturn bestMove[Math.floor(Math.random() * bestMove.length)];\n\t}\n\n\tstatic minimax = (game, depth, maximizingPlayer) => {\n\t\tif(depth == 0 || game.game_over()) {\n\t\t\treturn {eval: this.evaluate(game), bestMove: null}\n\t\t}\n\n\t\tif(maximizingPlayer) {\n\t\t\tlet maxEval = -9999\n\t\t\tlet possibleMoves = game.ugly_moves()\n\t\t\tlet bestMove = [];\n\n\t\t\tfor(let i = 0; i < possibleMoves.length; i++) {\n\t\t\t\tlet currentMove = possibleMoves[i];\n\t\t\t\tgame.ugly_move(currentMove);\n\t\t\t\tlet res = this.minimax(game, depth - 1, false)\n\t\t\t\tgame.undo();\n\t\t\t\tif(res.eval == maxEval) {\n\t\t\t\t\tmaxEval = res.eval;\n\t\t\t\t\tbestMove.push(currentMove)\n\t\t\t\t} else if(res.eval > maxEval) {\n\t\t\t\t\tbestMove = [];\n\t\t\t\t\tbestMove.push(currentMove)\n\t\t\t\t\tmaxEval = res.eval;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {eval: maxEval, bestMove: bestMove[Math.floor(Math.random() * bestMove.length)]}\n\t\t} else {\n\t\t\tlet minEval = 9999\n\t\t\tlet possibleMoves = game.ugly_moves()\n\t\t\tlet bestMove = [];\n\n\t\t\tfor(let i = 0; i < possibleMoves.length; i++) {\n\t\t\t\tlet currentMove = possibleMoves[i];\n\t\t\t\tgame.ugly_move(currentMove);\n\t\t\t\tlet res = this.minimax(game, depth - 1, true)\n\t\t\t\tgame.undo();\n\t\t\t\tif(res.eval == minEval) {\n\t\t\t\t\tminEval = res.eval;\n\t\t\t\t\tbestMove.push(currentMove)\n\t\t\t\t} else if(res.eval < minEval) {\n\t\t\t\t\tbestMove = [];\n\t\t\t\t\tbestMove.push(currentMove)\n\t\t\t\t\tminEval = res.eval;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {eval: minEval, bestMove: bestMove[Math.floor(Math.random() * bestMove.length)]}\n\t\t}\n\t}\n}\n\nexport default AI","import React from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport Chess from \"chess.js\";\nimport AI from \"../util/AI\";\n\nlet game;\n\nclass ChessBoard extends React.Component {\n\tstate = {\n\t\tfen: 'start',\n\t\tgameStatus: \"Running\",\n\t\tcurrentPlayer: null,\n\t\tsquareStyles: {},\n\t\tdraggable: true,\n\t\tsearchDepth: 3,\n\t\tmoveTime: 0 + \"s\"\n\t}\n\n\tcomponentDidMount = () => {\n\t\tgame = new Chess();\n\t\tthis.setState({ currentPlayer: game.turn() });\n\t};\n\n\tvalidate = pMove => {\n\t\tlet mappedMove = {\n\t\t\tfrom: pMove.sourceSquare,\n\t\t\tto: pMove.targetSquare,\n\t\t\tpromotion: \"q\"\n\t\t};\n\n\t\tif (game.move(mappedMove) == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (game.game_over()) {\n\t\t\tthis.setState({\n\t\t\t\tfen: game.fen(),\n\t\t\t\tgameStatus: \"Player \" + this.state.currentPlayer + \" won.\",\n\t\t\t\tdraggable: false\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({ fen: game.fen(), currentPlayer: game.turn() , squareStyles: {}});\n\t\tsetTimeout(() => {this.makeAIMove()},50)\n\t};\n\n\tmakeAIMove = () => {\n\t\tconsole.log(\"Making AI Move\")\n\t\tlet d1 = new Date()\n\t\tlet res = AI.minimax(game, this.state.searchDepth, false);\n\t\tconsole.log(res)\n\t\tlet d2 = new Date()\n\t\tgame.ugly_move(res.bestMove)\n\n\t\tif (game.game_over()) {\n\t\t\tthis.setState({\n\t\t\t\tfen: game.fen(),\n\t\t\t\tgameStatus: \"Player \" + this.state.currentPlayer + \" won.\",\n\t\t\t\tdraggable: false\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({ fen: game.fen(), currentPlayer: game.turn() , squareStyles: {}, moveTime: (d2-d1)/1000 + \"s\"});\n\t}\n\n\thandleClick = s => {\n\t\tlet potentialMoves = game.moves({ square: s });\n\t\tlet temp = {}\n\t\tpotentialMoves.forEach(move => {\n\t\t\tlet formatted = move.match(/([a-z][1-9])/g)\n\t\t\tif (formatted != null) temp[formatted[0]] = {backgroundColor: \"blue\", opacity: 0.4}\n\t\t})\n\t\tthis.setState({ squareStyles: temp });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Chessboard\n\t\t\t\t\tposition={this.state.fen}\n\t\t\t\t\tonDrop={this.validate}\n\t\t\t\t\tonMouseOverSquare={this.handleClick}\n\t\t\t\t\tsquareStyles={this.state.squareStyles}\n\t\t\t\t\tdraggable={this.state.draggable}\n\t\t\t\t/>\n\t\t\t\t<p>Game status: {this.state.gameStatus}</p>\n\t\t\t\t<p>Current Player: {this.state.currentPlayer}</p>\n\t\t\t\t<p>Move Time: {this.state.moveTime}</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ChessBoard;\n","import React from 'react';\nimport ChessBoard from './components/chessboard';\n\nfunction App() {\n  return (\n    <div>\n      <ChessBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}